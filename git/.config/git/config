[user]
	email = thibaud.chupin@gmail.com
	name = Thibaud Chupin

# Override settings for _work_ projects
[include]
path = ~/.config/git/config-work

[core]
	fileMode = false
	editor = vim
  autocrlf = input

[alias]
    # list the recent commits in a oneline, coloured form with the date
    ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative

    # list recent commits and the files they touched
    ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat

    # Find a file path within the directory
    find = "!git ls-files | grep -in"

    # Quick look at history with branches and stuff
    lsd = log --graph --boundary '--format=%C(yellow)%h%Creset%C(bold cyan)%d%Creset - %s %C(dim normal)(%ar)%Creset %C(bold blue)<%an>%Creset' --stat

    # List git branches sorted by last modified and ashow useful metadata
    # Example:
    #   master      Merge branch so-and-so          (3 weeks ago)  <Thibaud Chupin>
    #   my-feature  Implement feature this-and-that (3 weeks ago)  <Thibaud Chupin>
    brt = "!git for-each-ref refs/heads --color=always --sort -committerdate --format='%(HEAD)%(color:reset);%(color:yellow)%(refname:short)%(color:reset);%(contents:subject);%(color:green)(%(committerdate:relative))%(color:blue);<%(authorname)>' | column -t -s ';'"

    # Undo the last commit
    undo = reset HEAD~1 --mixed

    # Delete branches that no longer exist on the remote
    gone = "!f() \
      { \
        git fetch --all --prune; \
        git branch -vv | awk '/: gone]/{print $1}' | xargs git branch -D; \
      }; f"

    # Pick the parent commit for an interactive rebase.
    # Note: --update-refs is only available in git > 2.38
    frbi = "!f() \
      { \
        git rebase --autosquash --autostash --update-refs --interactive \
          $(git log --pretty=oneline --color=always | fzf --ansi | cut -d ' ' -f1)^ ; \
      }; f"

    # Perform interactive rebase up to the merge base with master
    apply-fixup = "!f() \
      { \
        master_branch=$(git branch -l | grep -e master -e main | sed 's/*//') \
        merge_base=$(git merge-base --fork-point $master_branch HEAD | cut -c 1-7); \
        if [ -z \"${merge_base}\" ]; then \
          echo \"Unable to locate merge base for the current branch.\"; \
          exit 1; \
        fi; \
        \
        git rebase --autosquash --autostash --update-refs --interactive $merge_base; \
      }; f"

    # Pick the branch to switch to
    sw = !git switch $(git branch -a --format '%(refname:short)' | sed 's~origin/~~' | sort | uniq | fzf)

    # Checkout a merge request from the command line
    # Usage: git mr origin 35
    mr = !sh -c 'git fetch $1 merge-requests/$2/head:mr-$1-$2 && git checkout mr-$1-$2' -

    view-mr = "!f() { glab mr view --web; }; f"

    sync = "!f() { git-extras sync; }; f"

    amend = commit --amend --edit

    wip = commit --no-verify --message 'wip'

    # Short commands
    cp = cherry-pick
    st = status -s
    ci = commit
    co = checkout
    cob = checkout -b
    br = branch

    # Helpers for Sublime Merge

    open-terminal = "!f() { x-terminal-emulator; }; f"

[init]
	defaultBranch = master

[diff]
	wsErrorHighlight = all # Show whitespace changes in diffs

[push]
	default = simple

  # Automatically create remote tracking branch if required
  autoSetupRemote = true

[pull]
	rebase = true

[rebase]
  # Automatically force-update any branches that point to commits that are being
  # rebased.
	updateRefs = true

[filter "lfs"]
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
	clean = git-lfs clean -- %f
