#! /usr/bin/env python3

"""
Installer for my dotfiles, provides ome porcelain around GNU ``stow`` invocations.

The installer looks at the ``STOWED_PROGRAMS`` dict for configurations. A configuration is a set of
dotfiles stored in a folder. The name of the configuration is the name of the folder.

The top level keys of the configurations dict are the configurations to install. The associated
values are nested dicts with additional information on the configuration. A configuration is only
installed if an executable with the same name is on the ``PATH``. The name can be overridden by
passing the ``executable`` property in the confiuration.

Stow tends to be over-eager when linking things and it may be nessary to manually create directories
before invoking ``stow``. The ``create_dirs`` key of the configuration is a list of directories to
create before invoking ``stow``.

USAGE:
./install all
./install vim bash

"""

import argparse
import os
import subprocess
import sys
from os.path import expanduser

STOWED_PROGRAMS = {
    "bash": {
        "create_dirs": ["~/.config/share", ],
    },
    "emacs": {
        "executable": "emacs"
    },
    "git": {
        "executable": "git"
    },
    "gdb": {
        "executable": "gdb"
    },
    "vim": {},
    "sublime-text-3": {
        "executable": "subl",
        "create_dirs": ["~/.config/sublime-text-3/Packages/User", ],
    },
    "sublime-merge": {
        "executable": "smerge",
        "create_dirs": ["~/.config/sublime-merge/Packages/User", ],
    },
    "kitty": {
        "create_dirs": ["~/.config", ],
    },
    "regolith": {
        "executable": "regolith-look",
        "create_dirs": ["~/.config/regolith", ],
    },
}

g_targets_processed = []


def is_installed(executable):
    ret = subprocess.run(
        ["which", executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE
    )
    return not bool(ret.returncode)


def stow(target, config, force=False):
    global g_targets_processed
    if target in g_targets_processed:
        print(f"    <{target}> already processed, skipping.")
        return True

    executable_name = config.get("executable", target)
    if is_installed(executable_name):
        g_targets_processed.append(target)

        if "create_dirs" in config:
            for directory in config["create_dirs"]:
                try:
                    os.makedirs(expanduser(directory))
                except FileExistsError:
                    pass

        # Note: Universal newlines tells python to use the default system encoding for the
        # stdout/stderr messages
        command = ["stow", "--target", expanduser('~'), "--restow", target]
        ret = subprocess.run(
            command,
            universal_newlines=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
        )
        return not bool(ret.returncode), " ".join(command), ret.stdout

    else:
        return True


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Install program configurations to the appropriate locations under the current user's home directory using GNU stow.",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument(
        "-f",
        "--force",
        action="store_true",
        help="Install configuration even if the associated executable is not installed",
    )
    parser.add_argument(
        "targets",
        choices=[*STOWED_PROGRAMS.keys(), "all"],
        type=str,
        nargs="+",
        help="The configurations to install",
    )
    args = parser.parse_args()

    if "all" in args.targets:
        args.targets = [*STOWED_PROGRAMS.keys()]

    for target in args.targets:
        if target in STOWED_PROGRAMS:
            executable_name = STOWED_PROGRAMS[target].get("executable", target)
            if not is_installed(executable_name):
                print(f"- Skipping <{target}>, <{executable_name}> is not in $PATH ".ljust(60, '.'), end='')
                print(" \033[31mFAIL\033[0m")
                continue

            print(f"- Installing configurations for {target} ".ljust(60, '.'), end="")
            ok, command, errmsg = stow(
                target, STOWED_PROGRAMS[target], force=args.force
            )
            if not ok:
                print(" \033[31mFAIL\033[0m")
                print(f"Error executing: {command}")
                print(errmsg)
                sys.exit(-1)
            else:
                print(" \033[32mOK\033[0m")
        else:
            print(f"\033[31mERROR\033[0m: unknow target <{target}>.")

    sys.exit(0)
