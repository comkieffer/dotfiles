#! /usr/bin/python3

# We _NEED_ to hardcode this path because we want to run this script using the system
# python even if the user has activated a virtual environment.

from __future__ import annotations

import os
import time
import sys
import re
import contextlib
import textwrap
from dataclasses import dataclass
from datetime import date, datetime, timedelta
from pathlib import Path
from zoneinfo import ZoneInfo

from rich import print
from rich.prompt import Confirm
from rich.panel import Panel
from rich.table import Table

import click

NOW_FILE = Path("~/now.txt").expanduser()

# How often should we prompt the user to update their status?
NOW_PROMPT_INTERVAL = timedelta(minutes=15)

LOCAL_TIME_ZONE = ZoneInfo(Path("/etc/timezone").read_text().strip())

#
# Type Definitions
#


@dataclass
class LogEntry:
    timestamp: datetime
    entry: str

    @property
    def project(self) -> str | None:
        words = self.entry.split()
        for word in words:
            if word.startswith("@"):
                return word[1:]
        return None

    @staticmethod
    def from_string(entry: str):
        line_pattern = re.compile(r"-\s\[(?P<date>.*?)\]\s(?P<entry>.*)")

        match = line_pattern.match(entry)
        if not match:
            print(
                Panel.fit(
                    f"Not a a valid log entry:\n\n{entry}", title="[bold red]Error"
                )
            )
            sys.exit(1)

        return LogEntry(
            timestamp=datetime.fromisoformat(match.group("date")),
            entry=match.group("entry"),
        )

    def __str__(self) -> str:
        timestr = self.timestamp.isoformat().replace("T", " ")
        return f"- [{timestr}] {self.entry}"


class NowFile:
    def __init__(self, entries: list[LogEntry]):
        self.entries = entries

    @staticmethod
    def load() -> NowFile:
        entries = []
        for line in NOW_FILE.open():
            entries.append(LogEntry.from_string(line))

        return NowFile(entries=entries)

#
# Helper Functions
#


def human_time_since(date: datetime) -> str:
    # Assume that all the times we have are in the local timezone.
    now = datetime.now(tz=date.tzinfo)
    delta = now - date

    # If the delta is from more than a week ago
    if delta.days > 7:
        return f"{delta.days} days ago"

    # If the time is from last week but not yesterday
    if delta.days > 1:
        return f"last {date.strftime('%A')}"

    if date.day != now.day:
        return "yesterday"

    minutes = delta.seconds // 60
    hours = minutes // 60
    if hours == 1:
        return f"1 hour ago"
    if hours > 1:
        return f"{hours} hours ago"

    if minutes == 1:
        return f"1 minute ago"

    return f"{minutes} minutes ago"


def human_duration(delta: timedelta) -> str:
    """Return a string with an approximate representation of the duration."""
    def plural(count: int, unit: str) -> str:
        if count > 1:
            unit += "s"
        return f"{count:2} {unit}"

    if delta.days >= 1:
        return plural(delta.days, "days")

    minutes = delta.seconds // 60
    hours = minutes // 60
    if hours >= 1:
        return plural(hours, "hour")

    return plural(minutes, "minute")

def format_duration(duration: timedelta) -> str:
    duration_str = ""

    hours, minutes = divmod(duration.seconds / 60, 60)
    assert int(hours) == hours

    if hours >= 1:
        duration_str = f"{int(hours)} hours"

    duration_str += f" {int(minutes)} minutes"

    return duration_str

#
# Actual Implementation
#

@click.command()
@click.option(
    "--should-update",
    is_flag=True,
    help="Check whether we need to ask the user for an update.",
)
@click.option(
    "--prompt",
    is_flag=True,
    help="Ask the user whether they want to log an update or not.",
)
@click.option("--show", type=click.DateTime(formats=("%Y-%m-%d",)), default=None, help="Show entries on a specific day")
@click.option(
    "--since", type=click.DateTime(formats=("%H:%M",)), default=None, help="When the activity started"
)
@click.argument("status", nargs=-1)
@click.pass_context
def main(ctx: click.Context, should_update: bool, prompt: bool, show: datetime, since: datetime, status: list[str]) -> None:
    if any((should_update, prompt)) and since:
        raise click.UsageError(
            "Cannot use '--since' in conjunction with '--should-update' and '--prompt'"
        )

    if any((should_update, prompt)) and status:
        raise click.UsageError("Cannot specify status and other options at the same time.")

    if should_update:
        # Invert the logic to match return codes (0 means we should update)
        sys.exit(not is_time_for_update())

    if prompt:
        sys.exit(prompt_user())

    if show is not None:
        sys.exit(show_entries_on(show.date(), is_current=False))

    if not status:
        sys.exit(show_entries_on(datetime.now().date(), is_current=True))


    start_time = datetime.now(tz=LOCAL_TIME_ZONE)
    start_time = start_time.replace(second=0, microsecond=0)
    if since is not None:
        start_time = start_time.replace(hour=since.hour, minute=since.minute)

    # If we have a log entry, write it to the file.
    if len(status) > 0:
        entry = LogEntry(
            timestamp=start_time, entry=" ".join(status)
        )
        with NOW_FILE.open("a") as f:
            f.write(str(entry) + "\n")

        return

def is_time_for_update():
    now = datetime.now()

    # Only ask for updates on work days.
    if not now.weekday() <= 5:
        return False

    # Only ask for updates during working hours.
    if not (8 <= now.hour <= 18):
        return False

    # if we haven't logged an update in a while, ask for an update.
    mtime = NOW_FILE.stat().st_mtime
    time_since_update = now - datetime.fromtimestamp(mtime)

    return time_since_update > NOW_PROMPT_INTERVAL


def prompt_user():
    last_entry = NowFile.load().entries[-1]

    entry_wrapped = "\n".join(textwrap.wrap(last_entry.entry))
    entry_indented = textwrap.indent(entry_wrapped, "> ")

    print(
        Panel.fit(
            "Remember to add entries to your [i]now[/] log every now and then?\n"
            "\n"
            f"Your last entry was {human_time_since(last_entry.timestamp)}: \n"
            "\n" + entry_indented,
            title="Howdy, cowboy!",
            padding=(1, 4),
        )
    )

    # Change the mtime of the file to prevent us from asking again too soon.
    new_mtime = time.time()
    os.utime(NOW_FILE, (new_mtime, new_mtime))

    return 0

def show_entries_on(day: date, *, is_current: bool):
    # Otherwise, we just want to see updates from today
    day_entries = [
        entry
        for entry in NowFile.load().entries
        if entry.timestamp.date() == day
    ]

    # If we are viewing the current day, we need to add a dummy entry at the current
    # time so that we can compute totals including the current activity.
    if is_current:
        now  = datetime.now(tz=LOCAL_TIME_ZONE)
        now = now.replace(second=0, microsecond=0)


        day_entries.append(
            LogEntry(entry="Now", timestamp=now)
            )

    if len(day_entries) == 0:
        print("No entries for {day}.")
        return 0

    grid = Table.grid(pad_edge=True)
    grid.add_column(width=7)  # Timestamp
    grid.add_column(width=15)  # duration
    grid.add_column()  # entry
    grid.add_column()  # project

    for idx in range(len(day_entries)):
        entry = day_entries[idx]
        duration = ""
        if idx < len(day_entries) - 1:
            next_entry = day_entries[idx + 1]
            duration = "for " + human_duration(next_entry.timestamp - entry.timestamp)

        styled_words = []
        for word in entry.entry.split():
            if word[0] == "@":
                word = f"[b]{word}[/]"
            styled_words.append(word)

        grid.add_row(
            entry.timestamp.strftime('%H:%M'),
            f"{duration}",
            " ".join(styled_words),
            f"[b]{entry.project}[/]" or "",
        )

    print(grid)

    #
    # Now compute the time-sheet entries
    #
    projects = {}

    for idx in range(len(day_entries) - 1):
        entry = day_entries[idx]
        next_entry = day_entries[idx + 1]

        project_name = entry.project or "Unknown"
        if project_name not in projects:
            projects[project_name] = timedelta(0)

        projects[project_name] += next_entry.timestamp - entry.timestamp


    print("\nTimesheet entries:")
    for project, duration in projects.items():
        print(f"{project:15}: {format_duration(duration)}")

    print("[b]Total[/]          :", format_duration(sum(projects.values(), timedelta(0))))

    return 0

if __name__ == "__main__":
    with contextlib.suppress(KeyboardInterrupt):
        main()

    sys.exit(0)
