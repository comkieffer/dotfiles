#!/usr/bin/env python3

import re
import sys
import subprocess
from os.path import expanduser
from pathlib import Path

import click
import platformdirs

APP_NAME = "ck-tools/cdo-cache-refresh"
CACHE_FILE = platformdirs.user_cache_path(APP_NAME) / "projects.txt"


def has_command(cmd: str) -> bool:
    ret = subprocess.run(["which", "fdfind"], capture_output=True, text=True)
    return ret.returncode == 0


def get_supported_finder() -> str:
    if has_command("fdfind"):
        return "fdfind"

    return "find"


def collect_projects() -> list[Path]:
    if get_supported_finder() == "fdfind":
        find_cmd = ["fdfind", "--hidden", "^.git$", expanduser("~")]
    else:
        find_pattern = ["-type", "d", "-a", "(", "-name" ".git", ")"]
        find_cmd = ["find", expanduser("~"), *find_pattern, "-print", "-prune"]

    click.echo(" ".join(find_cmd))
    ret = subprocess.run(find_cmd, text=True, capture_output=True, check=True)

    git_folders = ret.stdout.splitlines()
    projects = []
    exclude_patterns = [
        re.escape(expanduser("~/.")),
        re.escape(expanduser("/build/")),
    ]
    for folder in git_folders:
        for pat in exclude_patterns:
            # If the folder name matches one of the exclude patterns, ignore it
            if re.search(pat, folder):
                break
        else:
            projects.append(Path(folder).parent)

    return projects


def write_project_cache(projects: list[Path]) -> None:
    click.echo(f"Writing local projects cache to {CACHE_FILE} ...")
    CACHE_FILE.parent.mkdir(exist_ok=True, parents=True)
    with CACHE_FILE.open("w+") as f:
        for project in projects:
            f.write(str(project) + "\n")


@click.group()
def main() -> None:
    pass


@main.command()
def refresh() -> None:
    """Refresh the list of known projects"""
    click.echo("Updating local projects cache ...")
    projects = collect_projects()
    write_project_cache(projects)
    sys.exit(0)


@main.command()
def cache_path() -> None:
    click.echo(CACHE_FILE)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        pass
